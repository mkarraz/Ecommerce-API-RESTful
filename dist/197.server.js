"use strict";exports.id=197,exports.ids=[197],exports.modules={440:(t,e,i)=>{i.d(e,{Z:()=>r});const r=class{constructor(t){this.filePath=t}}},197:(t,e,i)=>{i.r(e),i.d(e,{default:()=>c});var r=i(147),o=i.n(r),d=i(440),n=function(t,e,i,r){return new(i||(i=Promise))((function(o,d){function n(t){try{c(r.next(t))}catch(t){d(t)}}function s(t){try{c(r.throw(t))}catch(t){d(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(n,s)}c((r=r.apply(t,e||[])).next())}))};class s extends d.Z{constructor(){super("./api/DB/products.txt"),this.writeFile=t=>n(this,void 0,void 0,(function*(){try{yield o().promises.writeFile(this.filePath,JSON.stringify(t))}catch(t){console.log("Method writeFile: ",t)}})),this.readFile=()=>n(this,void 0,void 0,(function*(){try{return(yield o().promises.readFile(this.filePath,"utf8"))?JSON.parse(yield o().promises.readFile(this.filePath,"utf8")):[]}catch(t){if(-2===t.errno)try{return yield o().promises.writeFile(this.filePath,JSON.stringify([])),[]}catch(t){console.error("Could not create file in such directory. ",t)}else console.log("Method readFile: ",t);return[]}}))}getAll(){return n(this,void 0,void 0,(function*(){return yield this.readFile()}))}getById(t){var e;return n(this,void 0,void 0,(function*(){try{const i=yield this.readFile();return null!==(e=i.find((e=>e.id===Number(t))))&&void 0!==e?e:{error:"Product not found"}}catch(t){console.log("Method getById: ",t)}return{error:"fetch item method failed"}}))}addProduct(t){return n(this,void 0,void 0,(function*(){try{const e=yield this.readFile(),i=0===e.length?1:Math.max(...e.map((t=>t.id)))+1,r=(new Date).toLocaleString("es-AR");return e.push(Object.assign(Object.assign({},t),{id:i,timestamp:r})),yield this.writeFile(e),i}catch(t){console.log("Method addProduct: ",t)}}))}updateProductById(t,e){return n(this,void 0,void 0,(function*(){try{const i=(yield this.readFile()).map((i=>i.id===Number(t)?Object.assign(Object.assign({},i),e):i));return yield this.writeFile(i),{msg:"Product succesfully updated!"}}catch(t){console.log("Method updateProductById: ",t)}}))}deleteProductById(t){return n(this,void 0,void 0,(function*(){try{const e=yield this.readFile(),i=e.filter((e=>e.id!==Number(t)));return e.length===i.length?`There is NO product with id= ${t}`:(yield this.writeFile(i),`Product id: ${t}, succesfully deleted!`)}catch(t){console.log("Method deleteProductById: ",t)}}))}}const c=new s}};